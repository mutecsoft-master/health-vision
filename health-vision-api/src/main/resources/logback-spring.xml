<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!-- 기본 로그 패턴 -->
    <property name="PATTERN" value="%d [%thread] %-5level %logger{36} - %msg%n"/>
    <property name="LOG_FILE" value=".log/healthvision"/>
    <property name="LOG_LEVEL" value="INFO"/>
    <property name="LOG_MAX_SIZE" value="100MB"/>
    <property name="LOG_MAX_HISTORY" value="30"/>
    <property name="PATTERN_FILE" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n"/>
    <property name="PATTERN_CONSOLE" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n"/>

    <!-- 개발 환경 (local) 설정 -->
    <springProfile name="local">
        <logger name="jdbc.connection" level="ERROR"/>
        <logger name="jdbc.sqlonly" level="ERROR"/>            <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
        <logger name="jdbc.sqltiming" level="INFO"/>        <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
        <logger name="jdbc.audit" level="ERROR"/>            <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
        <logger name="jdbc.resultset" level="ERROR"/>        <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
        <logger name="jdbc.resultsettable" level="INFO"/>    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
        <logger name="RequestLogger" level="INFO"></logger>

        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>${PATTERN}</pattern>
            </encoder>
        </appender>

        <root level="${LOG_LEVEL}">
            <appender-ref ref="STDOUT"/>
        </root>
    </springProfile>

     <!-- 개발 환경 (dev) 설정 -->
    <springProfile name="dev">
        <logger name="jdbc.connection" level="ERROR"/>
        <logger name="jdbc.sqlonly" level="ERROR"/>            <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
        <logger name="jdbc.sqltiming" level="INFO"/>        <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
        <logger name="jdbc.audit" level="ERROR"/>            <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
        <logger name="jdbc.resultset" level="ERROR"/>        <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
        <logger name="jdbc.resultsettable" level="INFO"/>    <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
        <logger name="RequestLogger" level="INFO"></logger>

        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>${PATTERN}</pattern>
            </encoder>
        </appender>

        <appender name="FILE_APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <encoder>
                <pattern>${PATTERN}</pattern>
            </encoder>
            <file>${LOG_FILE}.log</file>

            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <maxFileSize>${LOG_MAX_SIZE}</maxFileSize>
                <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
            </rollingPolicy>
        </appender>

        <root level="${LOG_LEVEL}">
            <appender-ref ref="FILE_APPENDER"/>
            <appender-ref ref="STDOUT"/>
        </root>

    </springProfile>

</configuration>